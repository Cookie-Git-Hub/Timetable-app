from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import app.keyboards as kb
from db_extraction import print_today_schedule
from db_extraction import print_tomorrow_schedule
from db_extraction import print_week_schedule
from dotenv import load_dotenv
import os

load_dotenv()
router = Router()

bot = Bot(os.getenv('TOKEN'))

class FeedbackStates(StatesGroup):
    feedback_waiting = State()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å —É—á–µ–±–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –ë–ì–≠–£.\n–ü–æ–∫–∞ —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –î–¶–ò-1, 1 –∫—É—Ä—Å, 23 –î–¶–ò-1", reply_markup=kb.main)

@router.message(F.text.lower() == "—Å–µ–≥–æ–¥–Ω—è üìñ")
async def today(message: Message):
    text = print_today_schedule()
    await message.answer(f"<b>–†–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>{text}", parse_mode='HTML')

@router.message(F.text.lower() == "–∑–∞–≤—Ç—Ä–∞ üìê")
async def tomorrow(message: Message):
    text = print_tomorrow_schedule()
    await message.answer(f"<b>–†–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>{text}", parse_mode='HTML')

@router.message(F.text.lower() == "–Ω–µ–¥–µ–ª—è üìÜ")
async def week(message: Message):
    text = print_week_schedule()
    await message.answer(f"<b>–†–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>{text}", parse_mode='HTML')

@router.message(F.text.lower() == "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öôÔ∏è")
async def more(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø. –º–µ–Ω—é...", reply_markup=kb.additional_menu)

@router.message(F.text.lower() == "–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤/–∂–∞–ª–æ–±—É üíå")
async def feedback(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤/–∂–∞–ª–æ–±—É, –º—ã –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—ë–º!", reply_markup=kb.feedback_menu)
    await state.set_state(FeedbackStates.feedback_waiting)

@router.message(FeedbackStates.feedback_waiting)
async def process_feedback(message: Message, state: FSMContext):
    await bot.forward_message(os.getenv('ID'), message.from_user.id, message.message_id)
    if message.text != "–í–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–ø. –º–µ–Ω—é üîô":    
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –°–ø–∞—Å–∏–±–æ!")
        await state.clear()
    else:
        async def go_back(message: Message):
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.additional_menu)

@router.message(F.text.lower() == "–≤–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–ø. –º–µ–Ω—é üîô")
async def go_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.additional_menu)

@router.message(F.text.lower() == "–∞–≤—Ç–æ—Ä—ã üëë")
async def authors(message: Message):
    await message.answer("<b>–ê–≤—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n@CookieRevolution –∏ @ppestikk", parse_mode='HTML')

@router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ üîô")
async def back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.main)

@router.message()
async def echo(message: Message):
    await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...')