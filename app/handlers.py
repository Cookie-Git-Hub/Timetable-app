from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import app.keyboards as kb
from db_extraction import print_today_schedule
from db_extraction import print_tomorrow_schedule
from db_extraction import print_week_schedule
from functions.registration import user_registration, is_user_blocked, remove_user
from dotenv import load_dotenv
import os

load_dotenv()
router = Router()

bot = Bot(os.getenv('TOKEN'))


class FeedbackStates(StatesGroup):
    feedback_waiting = State()


class RegistrationStates(StatesGroup):
    faculty_waiting = State()
    course_waiting = State()
    group_waiting = State()


@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —É—á–µ–±–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –ë–ì–≠–£.\n–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—á—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –¥–Ω–µ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è üëæ")
    await message.answer("–ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –º–∏–Ω–∏-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù", reply_markup=kb.registration)


@router.message(F.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
async def faculty(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
    await state.set_state(RegistrationStates.faculty_waiting)


@router.message(RegistrationStates.faculty_waiting)
async def course(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")
    global faculty
    faculty = message.text
    await state.set_state(RegistrationStates.course_waiting)


@router.message(RegistrationStates.course_waiting)
async def course(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
    global course
    course = message.text
    await state.set_state(RegistrationStates.group_waiting)


@router.message(RegistrationStates.group_waiting)
async def success(message: Message, state: FSMContext):
    user_id = message.from_user.id
    group = message.text
    user_registration(user_id, faculty, course, group)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await message.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! –Ø –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥, –µ—Å–ª–∏, –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫, –í—ã —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ –æ–± –æ—à–∏–±–∫–µ ü§ñ", reply_markup=kb.main)
    await state.clear()


@router.message(F.text.lower() == "—Å–µ–≥–æ–¥–Ω—è üìñ")
async def today(message: Message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        await message.answer("–¢—ã –ø–ª–æ—Ö–æ —Å–µ–±—è –≤—ë–ª, —Ç–∞–∫ —á—Ç–æ —è —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ü§°.")
    else:
        text = print_today_schedule()
        await message.answer(f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>{text}", parse_mode='HTML')


@router.message(F.text.lower() == "–∑–∞–≤—Ç—Ä–∞ üìê")
async def tomorrow(message: Message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        await message.answer("–¢—ã –ø–ª–æ—Ö–æ —Å–µ–±—è –≤—ë–ª, —Ç–∞–∫ —á—Ç–æ —è —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ü§°.")
    else:
        text = print_tomorrow_schedule()
        await message.answer(f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>{text}", parse_mode='HTML')


@router.message(F.text.lower() == "–Ω–µ–¥–µ–ª—è üìÜ")
async def week(message: Message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        await message.answer("–¢—ã –ø–ª–æ—Ö–æ —Å–µ–±—è –≤—ë–ª, —Ç–∞–∫ —á—Ç–æ —è —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ü§°.")
    else:
        text = print_week_schedule()
        await message.answer(f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>{text}", parse_mode='HTML')


@router.message(F.text.lower() == "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öôÔ∏è")
async def more(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø. –º–µ–Ω—é...", reply_markup=kb.additional_menu)


@router.message(F.text.lower() == "–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ üíå")
async def feedback(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤, –º—ã –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—ë–º!", reply_markup=kb.feedback_menu)
    await state.set_state(FeedbackStates.feedback_waiting)


@router.message(FeedbackStates.feedback_waiting)
async def process_feedback(message: Message, state: FSMContext):
    await bot.forward_message(os.getenv('ID'), message.from_user.id, message.message_id)
    if message.text != "–í–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–ø. –º–µ–Ω—é üîô":
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –°–ø–∞—Å–∏–±–æ!")
        await state.clear()
    else:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.additional_menu)


@router.message(F.text.lower() == "–≤–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–ø. –º–µ–Ω—é üîô")
async def go_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.additional_menu)


@router.message(F.text.lower() == "–∞–≤—Ç–æ—Ä—ã üëë")
async def authors(message: Message):
    await message.answer("<b>–ê–≤—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n@CookieRevolution –∏ @NAC_COOIlyaI", parse_mode='HTML')


@router.message(F.text.lower() == "—Å–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚öôÔ∏è")
async def change_data(message: Message):
    user_id = message.from_user.id
    remove_user(user_id)
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ üìù", reply_markup=kb.registration)


@router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ üîô")
async def back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...", reply_markup=kb.main)

    
@router.message()
async def echo(message: Message):
    await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...')
